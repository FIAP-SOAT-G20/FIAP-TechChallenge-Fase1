basePath: /api/v1
definitions:
  domain.OrderStatus:
    enum:
    - UNDEFINDED
    - OPEN
    - CANCELLED
    - PENDING
    - RECEIVED
    - PREPARING
    - READY
    - COMPLETED
    type: string
    x-enum-varnames:
    - UNDEFINDED
    - OPEN
    - CANCELLED
    - PENDING
    - RECEIVED
    - PREPARING
    - READY
    - COMPLETED
  domain.PaymentStatus:
    enum:
    - PROCESSING
    - CONFIRMED
    - FAILED
    - CANCELED
    type: string
    x-enum-varnames:
    - PROCESSING
    - CONFIRMED
    - FAILED
    - CANCELED
  domain.Role:
    enum:
    - COOK
    - ATTENDANT
    - MANAGER
    type: string
    x-enum-varnames:
    - COOK
    - ATTENDANT
    - MANAGER
  request.CreateCategoryRequest:
    properties:
      name:
        example: Foods
        type: string
    required:
    - name
    type: object
  request.CreateCustomerRequest:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      email:
        example: johndoe@contact.com
        type: string
      name:
        example: John Doe
        type: string
    required:
    - cpf
    - email
    - name
    type: object
  request.CreateOrderRequest:
    properties:
      customer_id:
        example: 1
        type: integer
    required:
    - customer_id
    type: object
  request.CreateProductRequest:
    properties:
      active:
        default: true
        example: true
        type: boolean
      category_id:
        example: 1
        type: integer
      description:
        example: The best burger in the world
        type: string
      name:
        example: BK Mega Stacker 2.0
        type: string
      price:
        example: 29.9
        type: number
    required:
    - category_id
    - description
    - name
    - price
    type: object
  request.CreateStaffRequest:
    properties:
      name:
        example: John Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        example: COOK
    required:
    - name
    - role
    type: object
  request.OrderProductRequest:
    properties:
      quantity:
        example: 10
        type: integer
    required:
    - quantity
    type: object
  request.SignInRequest:
    properties:
      cpf:
        example: 000.000.000-00
        type: string
    required:
    - cpf
    type: object
  request.UpdateCategoryRequest:
    properties:
      name:
        example: Beverages
        type: string
    required:
    - name
    type: object
  request.UpdateCustomerRequest:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      email:
        example: johndoe@email.com
        type: string
      name:
        example: John Doe
        type: string
    type: object
  request.UpdateOrderRequest:
    properties:
      staff_id:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/domain.OrderStatus'
        example: PENDING
    type: object
  request.UpdatePaymentRequest:
    properties:
      resource:
        example: c16896f0-483b-4573-a493-f4d2eb59ba31
        type: string
      topic:
        example: payment
        type: string
    type: object
  request.UpdateProductRequest:
    properties:
      active:
        example: true
        type: boolean
      category_id:
        example: 1
        type: integer
      description:
        example: The best burger in the world
        type: string
      name:
        example: McDonald's Big Mac
        type: string
      price:
        example: 29.9
        type: number
    type: object
  request.UpdateStaffRequest:
    properties:
      name:
        example: John Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        example: ATTENDANT
    required:
    - name
    - role
    type: object
  response.CategoriesPaginated:
    properties:
      categories:
        items:
          $ref: '#/definitions/response.CategoryResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  response.CategoryResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  response.CustomerResponse:
    properties:
      cpf:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  response.CustomersPaginated:
    properties:
      customers:
        items:
          $ref: '#/definitions/response.CustomerResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  response.ErrorResponse:
    properties:
      errors:
        example:
        - '[''Validation failed: field X is required'''
        - ' ''Invalid format for field Y'']'
        items:
          type: string
        type: array
    type: object
  response.HealthCheckResponse:
    properties:
      checks:
        additionalProperties:
          $ref: '#/definitions/response.HealthCheckVerifications'
        type: object
      status:
        $ref: '#/definitions/response.HealthCheckStatus'
    type: object
  response.HealthCheckStatus:
    enum:
    - pass
    - warn
    - fail
    type: string
    x-enum-varnames:
    - HealthCheckStatusPass
    - HealthCheckStatusWarn
    - HealthCheckStatusFail
  response.HealthCheckVerifications:
    properties:
      componentId:
        type: string
      status:
        $ref: '#/definitions/response.HealthCheckStatus'
      time:
        type: string
    type: object
  response.OrderPaginated:
    properties:
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/response.OrderResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  response.OrderProductPaginated:
    properties:
      limit:
        type: integer
      order_products:
        items:
          $ref: '#/definitions/response.OrderProductResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  response.OrderProductResponse:
    properties:
      created_at:
        type: string
      order_id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  response.OrderResponse:
    properties:
      created_at:
        type: string
      customer_id:
        type: integer
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/response.OrderProductResponse'
        type: array
      status:
        type: string
      total_bill:
        type: number
      updated_at:
        type: string
    type: object
  response.PaymentResponse:
    properties:
      external_payment_id:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      qr_data:
        type: string
      status:
        $ref: '#/definitions/domain.PaymentStatus'
    type: object
  response.ProductPaginated:
    properties:
      limit:
        type: integer
      page:
        type: integer
      products:
        items:
          $ref: '#/definitions/response.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  response.ProductResponse:
    properties:
      active:
        type: boolean
      category:
        $ref: '#/definitions/response.CategoryResponse'
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  response.SignInResponse:
    properties:
      cpf:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  response.StaffResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
    type: object
  response.StaffsPaginated:
    properties:
      limit:
        type: integer
      page:
        type: integer
      staffs:
        items:
          $ref: '#/definitions/response.StaffResponse'
        type: array
      total:
        type: integer
    type: object
externalDocs:
  description: GitHub Repository
  url: https://github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase1
host: localhost:8080
info:
  contact: {}
  description: API de um Fast Food para o Tech Challenge da FIAP - Fase 1 - 10SOAT
    - G20
  title: FIAP Tech Challenge Fase 1 - 10SOAT - G20
  version: "1"
paths:
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: List categories with pagination
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/response.CategoriesPaginated'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: create a new category with name
      parameters:
      - description: Create Category Request
        in: body
        name: createCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/request.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category created
          schema:
            $ref: '#/definitions/response.CategoryResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /api/v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Category deleted
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: get a category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category retrieved
          schema:
            $ref: '#/definitions/response.CategoryResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: update a category's name by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category Request
        in: body
        name: updateCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CategoryResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - categories
  /api/v1/customers:
    get:
      consumes:
      - application/json
      description: List customers
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomersPaginated'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: List customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a customer
      parameters:
      - description: Create Customer Request
        in: body
        name: createCustomerRequest
        required: true
        schema:
          $ref: '#/definitions/request.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.CustomerResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a customer
      tags:
      - customers
      - sign-up
  /api/v1/customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Customer Request
        in: body
        name: updateCustomerRequest
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a customer
      tags:
      - customers
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: List orders
      parameters:
      - description: Customer ID
        in: query
        name: customer_id
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderPaginated'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create an order
      parameters:
      - description: Create Order Request
        in: body
        name: createOrderRequest
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create an order
      tags:
      - orders
  /api/v1/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get an order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: |-
        Update an order
        Only staff can update the order status
        The status are: OPEN, CANCELLED, PENDING, RECEIVED, PREPARING, READY, COMPLETED
        Transition of status:
        - OPEN      -> CANCELLED || PENDING
        - CANCELLED -> {},
        - PENDING   -> OPEN || RECEIVED
        - RECEIVED  -> PREPARING
        - PREPARING -> READY
        - READY     -> COMPLETED
        - COMPLETED -> {}
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Order Request
        in: body
        name: updateOrderRequest
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an order
      tags:
      - orders
  /api/v1/orders/histories:
    get:
      consumes:
      - application/json
      description: List order histories
      parameters:
      - description: Status name
        in: query
        name: status
        type: string
      - description: Order ID
        in: query
        name: order_id
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderPaginated'
      summary: List order histories
      tags:
      - orderHistories
  /api/v1/orders/histories/{id}:
    get:
      consumes:
      - application/json
      description: Get an order history
      parameters:
      - description: Order History ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get an order history
      tags:
      - orderHistories
  /api/v1/orders/products:
    get:
      consumes:
      - application/json
      description: List order products
      parameters:
      - description: Order ID
        in: query
        name: order_id
        type: integer
      - description: Product ID
        in: query
        name: product_id
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderProductPaginated'
      summary: List order products
      tags:
      - orderHistories
  /api/v1/orders/products/{order_id}/{product_id}:
    delete:
      consumes:
      - application/json
      description: Delete an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an order product
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get an order product
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Order Product Request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.OrderProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OrderProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create an order product
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Order Product Response
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.OrderProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OrderProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an order product
      tags:
      - orders
  /api/v1/payments/{order_id}/checkout:
    post:
      consumes:
      - application/json
      description: 'Create a checkout on a order (2.b: > 2.b.: v. Fake checkout)'
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaymentResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a checkout on a order
      tags:
      - products
      - payments
  /api/v1/payments/callback:
    post:
      consumes:
      - application/json
      description: |-
        Update a payment on a order (2.b: > 2.b.: v. Fake checkout)
        - resource = external payment id
        - topic = payment
      parameters:
      - description: Update Payment Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaymentResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a payment on a order
      tags:
      - products
      - payments
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: 'List products or filter by category (2.b: iv. Buscar produtos
        por categoria;)'
      parameters:
      - description: Product name
        in: query
        name: name
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductPaginated'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: Create Product Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Product Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /api/v1/sign-in:
    post:
      consumes:
      - application/json
      description: 'Sign in a customer (2.b: ii. Identificação do Cliente via CPF)'
      parameters:
      - description: SignIn Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully signed in
          schema:
            $ref: '#/definitions/response.SignInResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Sign in a customer
      tags:
      - customers
      - sign-in
  /api/v1/staffs:
    get:
      consumes:
      - application/json
      description: List staffs
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StaffsPaginated'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: List staffs
      tags:
      - staffs
    post:
      consumes:
      - application/json
      description: |-
        Create a staff
        Roles:
        - COOK
        - ATTENDANT
        - MANAGER
      parameters:
      - description: Create Staff Request
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/request.CreateStaffRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.StaffResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a staff
      tags:
      - staffs
      - sign-up
  /api/v1/staffs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a staff
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a staff
      tags:
      - staffs
    get:
      consumes:
      - application/json
      description: Get a staff
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StaffResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a staff
      tags:
      - staffs
    put:
      consumes:
      - application/json
      description: Update a staff
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Staff Request
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/request.UpdateStaffRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a staff
      tags:
      - customers
  /health:
    get:
      description: Checks application health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.HealthCheckResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HealthCheckResponse'
      summary: Application HealthCheck
      tags:
      - healthcheck
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: '2.b: i.Cadastro do Cliente'
  name: sign-up
- description: '2.b: iii. Criar, editar e remover produtos;'
  name: products
- description: '2.b: v. Fake checkout'
  name: payments
- description: '2.b: ii. Identificação do Cliente via CPF'
  name: sign-in
